
# Rootstock: Listening to smart contract events from a frontend DApp via Ethers.js

## Overview

This guide will walk you through the necessary steps to listen to smart contract events via ethers.js directly from a frontend DApp. These steps cover the installation and configuration of essential tools and technologies.

Smart contracts emit events that serve as signals, notifying developers and applications of meaningful occurrences dictated by the contract's logic. For instance, in ERC-20 token contracts, a "transfer" event is triggered when tokens are traded, thus providing transaction details. Listening to events in real-time is crucial for Web3 projects. Ethers.js offers a streamlined workflow for setting up blockchain event listeners, enabling instant alerts for on-chain activities.

## Prerequisites

Before starting, ensure you have the following prerequisites:

- Familiarity with command-line usage
- Git
- Basic understanding of smart contracts
- Knowledge of [Full Stack dApp Guide on Rootstock](https://dev.rootstock.io/guides/full-stack-dapp-on-rsk/part1-overview/)

## Setting up your environment for Hardhat

### Step 1: Installing Node.js

Node.js is a powerful JavaScript runtime environment, which forms the foundation for Hardhat. Ensure you have Node.js >= 12.0 installed on your system.

Here's how to install Node.js on Linux, MacOS and Windows:

- Linux

  ```shell
  sudo apt update
  sudo apt install curl git
  sudo apt install nodejs
  curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
  ```

- Mac OSX

  ```shell
  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.35.2/install.sh | bash
  nvm install 12
  nvm use 12
  nvm alias default 12
  npm install npm --global # Upgrade npm to the latest version
  ```

- Windows

Install [Git for Windows](https://git-scm.com/download/win) and [Node installer for Windows](https://nodejs.org/dist/latest-v12.x/)

> **Note:** For Windows, we strongly recommend you use [Windows Subsystem for Linux (WSL)](https://learn.microsoft.com/en-us/windows/dev-environment/javascript/nodejs-on-wsl) for a better development experience.

## Step 2: Setting up the RSK Local Node

To interact with [RSK](https://dev.rootstock.io/), you need a local node. Follow the installation instructions outlined in the [RSK Devportal](https://dev.rootstock.io/quick-start/step1-install-rsk-local-node/). There are various ways to install an RSK node, on other supported platforms: Check out [installing RSKj](https://dev.rootstock.io/rsk/node/install/).

## Step 3: Setting up Hardhat

Next, set up Hardhat by navigating to the `block-hardhat` folder and running the following commands:

```bash
cd block-hardhat
npm install
```

## Step 4: Installing ethers.js

```bash
npm install --save ethers
```

## Step 5: Importing ethers.js

For node.js require:

```bash
const { ethers } = require("ethers");
```

For ES6 or TypeScript:

```bash
import { ethers } from "ethers";
```

If you run into an issue during the install process, check the [Ethers documentation](https://docs.ethers.org/v5/getting-started/)

## ABI

[Precompiled ABIs](https://dev.rootstock.io/develop/libs/rsk-precompilied-abis/)

## Providing a mnemonic phrase for RSK testnet deployment

To facilitate RSK testnet deployment, generate a secure [Mnemonic phrase](https://en.bitcoinwiki.org/wiki/Mnemonic_phrase) consisting of 12 English words:

```bash
mnemonics > .testnet.seed-phrase
```

> Remember: Ensure RSKj (Regtest) is running in a separate terminal. To setup Regtest see the [prerequisites section](https://github.com/bguiz/workshop-rsk-prereqs/blob/master/walkthru.md#posix-compliant-shell) for Complete Full Stack dApp Guide on RSK - Part 2:Smart Contracts.

Then, create a `.secret` file in the `block-hardhat` folder and store your mnemonic phrase.

> If you have any issue see this [resource for generating a mnemonic phrase](https://iancoleman.io/bip39/)

## Compiling and deploying a smart contract(s)

Navigate to the `block-hardhat` folder and run one of the following scripts based on your chosen testing network:

```bash
npm run deploy:hardhat
npm run deploy:regtest
npm run deploy:testnet
npm run deploy:ganache
```

These scripts compile a test token (_Meow Token_). Deploy this token to the selected network, and copy the deployed contract data to the frontend smart contracts folder `front/contracts`.

## Running the DApp

Now, let's test our application. Follow these steps to view the application in your browser:

1.Navigate to the frontend folder:

```bash
cd ..
cd frontend
```

2.Then, run `index.html` in your browser with a [`Live Server`](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer) VSCode extension by clicking the `Go Live` button in the bottom-right corner of the VSCode window. VSCode will open the web page from `index.html` in a new browser window.

## Final Considerations

We hope it was easy to follow these steps to use `ethers.js` to seamlessly listen to smart contract events from your frontend DApp! This powerful tool allows your application to respond to on-chain events in real time providing a highly interactive and engaging user experience.

Our goal is to join forces and give options to people who believe in smart contracts based on Ethereum, and also believe in the power of Bitcoin, through RSK.
